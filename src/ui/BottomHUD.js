// src/ui/BottomHUD.js
import UI from './theme.js';
import { GearSlots } from './GearSlots.js';
import { HBar } from './HBar.js';

export class BottomHUD {
  constructor(scene, gear, onClick, pullBtnRect){
    this.s = scene;
    this.gear = gear;
    this.onClick = onClick || {};
    this.pullBtnRect = pullBtnRect || { x: scene.scale.width - 16, width: 128 };

    // –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø–∞–Ω–µ–ª–∏
    this._computeGeom();

    // —Ñ–æ–Ω –ø–æ–¥ ¬´—Å—Ç–µ–∫–ª–æ¬ª (–Ω–∏–∂–µ —Å–ª–æ—Ç–æ–≤/–±–∞—Ä–æ–≤)
    const Z_BG = Math.min(UI.z.slots ?? 700, UI.z.bars ?? 705) - 1;
    this.bg = scene.add.graphics().setDepth(Z_BG);

    // –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ–Ω
    this._redrawBg();

    // —Å–ª–æ—Ç—ã —Å–ª–µ–≤–∞ (–∏—Ö —Ñ–æ–Ω –ª—É—á—à–µ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å ‚Äî –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏)
    this.slots = new GearSlots(scene, gear, this.onClick);
    this.slots.yBottom = this.yBottom - 12;
    this.slots.yTop = this.slots.yBottom - this.slots.h;
    // —É–±–µ—Ä—ë–º –ø–ª–æ—Ç–Ω—ã–µ –ø–ª–∏—Ç–∫–∏ —É —Å–ª–æ—Ç–æ–≤ ‚Äî —Ñ–æ–Ω –ø–∞–Ω–µ–ª–∏ –æ–±—â–∏–π, —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π
    this.slots._elems?.forEach(({ bg }) => { try { bg?.clear?.(); } catch(_){} });

    // –ø—Ä–∞–≤–µ–µ ‚Äî –¥–≤–µ –ø–æ–ª–æ—Å—ã
    const { leftX, innerW, barH, y1, y2 } = this._barsFrame();
    this.rodBar  = new HBar(scene, leftX, y1, innerW, barH, '–£–¥–æ—á–∫–∞', { icon:'üé£', depth: UI.z.bars });
    this.lineBar = new HBar(scene, leftX, y2, innerW, barH, '–õ–µ—Å–∫–∞',   { icon:'üßµ', depth: UI.z.bars });

    // —Ñ–ª–∞–≥–∏/—Å–æ—Å—Ç–æ—è–Ω–∏—è
    this._enabled = false;

    // —Ä–µ—Å–∞–π–∑
    this._boundLayout = this.layout.bind(this);
    scene.scale.on('resize', this._boundLayout);
  }

  // ==== –ø—É–±–ª–∏—á–Ω–æ–µ API ====
  setMode(m){
    const active = (m === 'fight');
    this._enabled = active;
    // –ù–ò–ö–ê–ö–û–ô —Ñ–æ—Ä—Å-–∞–ª—å—Ñ—ã ‚Äî –ø–∞–Ω–µ–ª—å –≤—Å–µ–≥–¥–∞ —Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è
    this.rodBar?.setEnabled?.(active);
    this.lineBar?.setEnabled?.(active);
    if (!active){ this.rodBar?.set?.(0); this.lineBar?.set?.(0); }
  }
  set(rod, line){ this.rodBar?.set?.(rod); this.lineBar?.set?.(line); }
  get yTopBars(){ return this.yTop; }

  destroy(){
    this.s.scale.off('resize', this._boundLayout);
    this.bg?.destroy();
    this.rodBar?.destroy?.();
    this.lineBar?.destroy?.();
    // this.slots?.destroy?.();
  }

  // ==== –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ ====
  _computeGeom(){
    const W = this.s.scale.width;
    this.h = Math.min(96, Math.floor(W * 0.12));  // –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏
    this.yBottom = this.s.scale.height - 12;
    this.yTop = this.yBottom - this.h;
    this.x = 12; this.w = W - 24;                 // ¬´–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è¬ª —à–∏—Ä–∏–Ω–∞ (–¥–æ –≤—ã—Ä–µ–∑–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫—É)
  }

  _rightSafeX(){
    // –∫—Ä–∞–π, –î–û –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ–Ω, –æ—Å—Ç–∞–≤–ª—è—è –º–µ—Å—Ç–æ –ø–æ–¥ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É ¬´–¢—è–Ω—É—Ç—å¬ª
    const W = this.s.scale.width;
    const px = (this.pullBtnRect?.x ?? (W - 16));
    const half = (this.pullBtnRect?.width ?? 0) / 2;
    const gap = (UI.layout?.pull?.outerPad ?? 18);
    return Math.max(this.x + 160, Math.round(px - half - gap)); // –Ω–µ —Å–∂–∏–º–∞–µ–º –ø–∞–Ω–µ–ª—å –º–µ–Ω—å—à–µ 160
  }

  _redrawBg(){
    const r = UI.radius ?? 12;
    const safeRight = this._rightSafeX();
    const drawW = Math.max(160, Math.min(this.w, safeRight - this.x)); // –≤—ã—Ä–µ–∑ —Å–ø—Ä–∞–≤–∞

    // —á–∏—Å—Ç–∏–º
    this.bg.clear();

    // —Ç–µ–Ω—å –ø–æ–¥ –ø–∞–Ω–µ–ª—å—é (–º—è–≥–∫–∞—è)
    this.bg.fillStyle(0x000000, 0.18);
    this.bg.fillRoundedRect(this.x, this.yTop + 3, drawW, this.h, r);

    // –°–ê–ú–ê –ü–ê–ù–ï–õ–¨ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è ¬´—Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è¬ª (—Ç—ë–º–Ω–∞—è, –æ—á–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è)
    const GLASS = 0x0c1220;          // –≥–ª—É–±–æ–∫–∏–π —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
    this.bg.fillStyle(GLASS, 0.16);  // 0.12‚Äì0.18 ‚Äî –≤–∏–¥–Ω–æ —Ñ–æ–Ω
    this.bg.fillRoundedRect(this.x, this.yTop, drawW, this.h, r);

    // –ª—ë–≥–∫–∏–π –≤–µ—Ä—Ö–Ω–∏–π ¬´–±–ª–∏–∫¬ª
    const shineH = Math.max(10, Math.floor(this.h * 0.35));
    this.bg.fillStyle(0xffffff, 0.06);
    this.bg.fillRoundedRect(this.x, this.yTop, drawW, shineH, r);

    // —Ç–æ–Ω–∫–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ö–∞–π–ª–∞–π—Ç
    this.bg.lineStyle(2, 0xffffff, 0.08);
    this.bg.strokeRoundedRect(this.x + 1, this.yTop + 1, drawW - 2, this.h - 2, Math.max(1, r - 1));

    // –ª—ë–≥–∫–∞—è –≤–Ω–µ—à–Ω—è—è –æ–±–≤–æ–¥–∫–∞ (–¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Å–≤–µ—Ç–ª–æ–π –≤–æ–¥–µ)
    this.bg.lineStyle(2, 0x000000, 0.10);
    this.bg.strokeRoundedRect(this.x, this.yTop, drawW, this.h, r);
  }

  _barsFrame(){
    const leftX  = this.slots?.xs?.[4] != null
      ? (this.slots.xs[4] + this.slots.SIZE + 16)
      : (this.x + 5*64 + 16); // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ xs –Ω–µ—Ç

    // –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –¥–ª—è –±–∞—Ä–æ–≤ —Ç–æ—Ç –∂–µ safeRight
    const rightX = this._rightSafeX();
    const innerW = Math.max(160, rightX - leftX);

    const barH = 18, spacing = 14;
    const y1 = this.yBottom - 16 - (barH + spacing);
    const y2 = this.yBottom - 16;
    return { leftX, innerW, barH, y1, y2 };
  }

  layout(){
    // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ–Ω (—Å –≤—ã—Ä–µ–∑–æ–º —Å–ø—Ä–∞–≤–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫—É)
    this._computeGeom();
    this._redrawBg();

    // –æ–±–Ω–æ–≤–∏—Ç—å ¬´—É—Ä–æ–≤–µ–Ω—å¬ª —Å–ª–æ—Ç–æ–≤
    if (this.slots){
      this.slots.yBottom = this.yBottom - 12;
      this.slots.yTop = this.slots.yBottom - this.slots.h;
    }

    // —Å–¥–≤–∏–Ω—É—Ç—å –ø–æ–ª–æ—Å—ã
    const { leftX, innerW, y1, y2 } = this._barsFrame();

    if (typeof this.rodBar?.setPosition === 'function'){
      this.rodBar.setPosition(leftX, y1);
      if (typeof this.rodBar.setWidth === 'function') this.rodBar.setWidth(innerW);
    }
    if (typeof this.lineBar?.setPosition === 'function'){
      this.lineBar.setPosition(leftX, y2);
      if (typeof this.lineBar.setWidth === 'function') this.lineBar.setWidth(innerW);
    }
  }
}

export default BottomHUD;
